% git

$ branch: git branch | awk '{print $NF}'
$ remote_branch: git branch -r | awk '{print $NF}'
$ commit: git log --oneline
$ file: find . -regex '.*' --- --multi --expand
$ stash: git stash list --- --delimiter ':' --column 1
$ tag: git tag -l
$ repo_root: git rev-parse --show-toplevel
$ unstaged_files: git status --untracked-files=all -s --porcelain | awk '{print $NF}' | xargs -I % realpath -s --relative-to="$(pwd)" "<repo_root>/%" --- --multi --expand
$ staged_files: git diff --cached --name-only | xargs -I % realpath -s --relative-to="$(pwd)" "<repo_root>/%" --- --multi --expand

# Change branch
git checkout <branch>

# Go to repo root
cd <repo_root>

# Pull rebase
git pull --rebase origin <remote_branch>

# Rollback a file to a specific commit
git checkout <commit> -- <file>

# Stage modified files
git add <unstaged_files>

# Remove file from staging
git restore --staged <staged_files>

# List modified files between branches
git diff --name-status <branch1> <branch2>

# Remove file from git history in current branch
git filter-branch --index-filter 'git rm -rf --cached --ignore-unmatch <file>' HEAD

# Remove commits from branch
git rebase -i <commit> # Pick one commit prior to the target

# Ignore future changes for a file
git update-index --skip-worktree <file>

# Ignore future changes for a file
git update-index --no-skip-worktree <file>

# Add a git submodule
git submodule add <submodule_name>

# Initialize submodules
git submodule update --init --recursive

% git, stash
@ git

# List stashes
git stash list

# Show stash summary
git stash show <stash>

# Remove stash
git stash drop <stash>

# Create branch form last stash
git stash branch <branch>

# Create branch from specific stash
git stash branch <new_branch> <stash>

# Create an annotated stash
git stash push -m "<stash_name>"

# Apply a stash
git stash apply <stash>

% git, tags
@ git

## List tags
git tag -l

## List tags with annotations
git tag -n

## Create a new annotated tag
git tag -a <tag-name> -m "<annotation>"

## Push tag to remote
git push origin tag <tag>

% git, signing
@ git

## Signing a commit
git commit -S -m <message>

## Auto sign every commit
git config --global commit.gpgsign true

## Setting a gpg key
git config --global user.signingkey <key id>

## Setting a ssh key
### Configure to use ssh keys
git config --global gpg.format ssh

### Pick which ssh key to use
git config --global user.signingkey <path-to-pub-key>

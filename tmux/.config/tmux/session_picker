#!/usr/bin/env bash

# Get existing sessions with a space and asterisk at the end
existing_sessions=$(tmux list-sessions | awk -F ':' '{print $1 " *"}')
session_dir="$HOME/.config/tmux/session-scripts/"

# Determine the correct realpath command based on OS
realpath_cmd=$(command -v grealpath || command -v realpath)

# Find scripts excluding .gitkeep
scripts=$(find "$session_dir" -type f ! -iname ".gitkeep" -exec "$realpath_cmd" --relative-to="$session_dir" {} \;)

# Filter out existing sessions
while IFS= read -r line; do
    session_option="${line##*/}"
    if echo "$existing_sessions" | grep -q "$session_option"; then
        scripts=$(echo "$scripts" | sed "\#${line}#d")
    fi
done <<< "$scripts"

# Prepare session options
if [ -z "$scripts" ]; then
    session_options=$(printf "%s" "$existing_sessions" | sort)
else
    session_options=$(printf "%s\n%s" "$scripts" "$existing_sessions" | sort)
fi

# Add a kill session option
session_options+="\nKill Session"

# Color existing sessions blue
session_options=$(echo -e "$session_options" | awk '/ \*$/ {printf "\033[1;34m%s\033[0m\n", $0; next} {print}')

# Prompt for session selection
session=$(printf "%s" "$session_options" | fzf --ansi --header="Pick a session or 'Kill Session'" | awk '{print $1}') # Get the first field

# Debugging: Print the selected session name
echo "Selected option: '$session'"

# Handle session switching or attachment
if [[ "$session" == "Kill" ]]; then
    # Confirm kill action
    read -p "Are you sure you want to kill the session? (y/n): " confirm
    if [[ "$confirm" == [yY] ]]; then
        tmux kill-session -t "$session_name"
        echo "Session '$session_name' killed."
    fi
elif [ -n "$session" ]; then
    session_name="${session##*/}"
    if ! tmux has-session -t "$session_name" 2>/dev/null; then
        "$session_dir/$session"
    fi
    if [ -n "$TMUX" ]; then
        tmux switch -t "$session_name"
    else
        tmux attach -t "$session_name"
    fi
fi
